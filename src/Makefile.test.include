TESTS += test/test_btcr
bin_PROGRAMS += test/test_btcr
TEST_SRCDIR = test
TEST_BINARY=test/test_btcr$(EXEEXT)


EXTRA_DIST += \
	test/bctest.py \
	test/btcr-util-test.py \
	test/data/btcr-util-test.json \
	test/data/blanktx.hex \
	test/data/tt-delin1-out.hex \
	test/data/tt-delout1-out.hex \
	test/data/tt-locktime317000-out.hex \
	test/data/tx394b54bb.hex \
	test/data/txcreate1.hex \
	test/data/txcreate2.hex \
	test/data/txcreatedata1.hex \
	test/data/txcreatedata2.hex \
	test/data/txcreatesign.hex

JSON_TEST_FILES = \
  test/data/script_tests.json \
  test/data/base58_keys_valid.json \
  test/data/base58_encode_decode.json \
  test/data/base58_keys_invalid.json \
  test/data/bip39_vectors.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json \
  test/data/sighash.json

RAW_TEST_FILES = test/data/alertTests.raw

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

BTCr_TESTS =\
  test/arith_uint256_tests.cpp \
  test/scriptnum10.h \
  test/addrman_tests.cpp \
  test/alert_tests.cpp \
  test/allocator_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/bip32_tests.cpp \
  test/bip39_tests.cpp \
  test/bloom_tests.cpp \
  test/bswap_tests.cpp \
  test/cachemap_tests.cpp \
  test/cachemultimap_tests.cpp \
  test/checkblock_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/crypto_tests.cpp \
  test/DoS_tests.cpp \
  test/getarg_tests.cpp \
  test/governance_validators_tests.cpp \
  test/hash_tests.cpp \
  test/key_tests.cpp \
  test/limitedmap_tests.cpp \
  test/dbwrapper_tests.cpp \
  test/main_tests.cpp \
  test/mempool_tests.cpp \
  test/merkle_tests.cpp \
  test/miner_tests.cpp \
  test/multisig_tests.cpp \
  test/net_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/policyestimator_tests.cpp \
  test/pow_tests.cpp \
  test/prevector_tests.cpp \
  test/ratecheck_tests.cpp \
  test/reverselock_tests.cpp \
  test/rpc_tests.cpp \
  test/sanity_tests.cpp \
  test/scheduler_tests.cpp \
  test/script_P2SH_tests.cpp \
  test/script_P2PKH_tests.cpp \
  test/script_tests.cpp \
  test/scriptnum_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/streams_tests.cpp \
  test/test_btcr.cpp \
  test/test_btcr.h \
  test/timedata_tests.cpp \
  test/transaction_tests.cpp \
  test/txvalidationcache_tests.cpp \
  test/versionbits_tests.cpp \
  test/uint256_tests.cpp \
  test/univalue_tests.cpp \
  test/util_tests.cpp

if ENABLE_WALLET
BTCr_TESTS += \
  test/accounting_tests.cpp \
  wallet/test/wallet_tests.cpp \
  test/rpc_wallet_tests.cpp
endif

test_test_btcr_SOURCES = $(BTCr_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_btcr_CPPFLAGS = $(AM_CPPFLAGS) $(BTCr_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)
test_test_btcr_LDADD = $(LIBBTCr_SERVER) $(LIBBTCr_CLI) $(LIBBTCr_COMMON) $(LIBBTCr_UTIL) $(LIBBTCr_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \
  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)
test_test_btcr_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
if ENABLE_WALLET
test_test_btcr_LDADD += $(LIBBTCr_WALLET)
endif

test_test_btcr_LDADD += $(LIBBTCr_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)
test_test_btcr_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

if ENABLE_ZMQ
test_test_btcr_LDADD += $(ZMQ_LIBS)
endif

nodist_test_test_btcr_SOURCES = $(GENERATED_TEST_FILES)

$(BTCr_TESTS): $(GENERATED_TEST_FILES)

CLEAN_BTCr_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_BTCr_TEST)

btcr_test: $(TEST_BINARY)

btcr_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

btcr_test_clean : FORCE
	rm -f $(CLEAN_BTCr_TEST) $(test_test_btcr_OBJECTS) $(TEST_BINARY)

check-local:
	@echo "Running test/btcr-util-test.py..."
	$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/btcr-util-test.py
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check
if EMBEDDED_UNIVALUE
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check
endif

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@echo "namespace json_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"
